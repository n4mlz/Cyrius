name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-24.04
    timeout-minutes: 7.5
    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_CACHE_SIZE: '2G'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache sccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ hashFiles('rust-toolchain.toml') }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sccache-${{ hashFiles('rust-toolchain.toml') }}-
            ${{ runner.os }}-sccache-

      - name: Install sccache
        uses: taiki-e/install-action@v2
        with:
          tool: sccache

      - name: Define APT packages
        run: echo qemu-system-x86 > packages.txt

      - name: Week salt
        id: week_salt
        run: echo "value=$(date +%G-%V)" >> "$GITHUB_OUTPUT"

      - name: Prepare APT cache dir
        run: mkdir -p .apt-cache

      - name: Restore APT cache
        uses: actions/cache@v4
        with:
          path: .apt-cache
          key: apt-${{ runner.os }}-${{ runner.image }}-${{ hashFiles('packages.txt') }}-${{ steps.week_salt.outputs.value }}
          restore-keys: |
            apt-${{ runner.os }}-

      - name: Seed system APT cache
        run: sudo cp -n .apt-cache/*.deb /var/cache/apt/archives/ 2>/dev/null || true

      - name: Install packages (QEMU)
        run: |
          sudo apt-get update -yq
          sudo apt-get install -yq --no-install-recommends $(cat packages.txt)

      - name: Collect downloaded .deb
        run: sudo cp -n /var/cache/apt/archives/*.deb .apt-cache/ 2>/dev/null || true

      - name: Install Rust (nightly)
        uses: dtolnay/rust-toolchain@nightly

      - name: Add required rust components
        run: |
          rustup component add --toolchain nightly rust-src llvm-tools-preview
          rustup target add --toolchain nightly x86_64-unknown-uefi

      - name: Show rustc version
        run: rustc -Vv && cargo -V

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust-toolchain.toml') }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('rust-toolchain.toml') }}-
            ${{ runner.os }}-cargo-

      - name: Cache target
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('rust-toolchain.toml') }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-target-${{ hashFiles('rust-toolchain.toml') }}-
            ${{ runner.os }}-target-

      - name: Build xtask tooling
        run: cargo build -p xtask

      - name: Build tests (no run)
        run: cargo xtask test --no-run

      - name: Run tests in QEMU (with timeout)
        run: |
          set -euo pipefail
          timeout 5m cargo xtask test
